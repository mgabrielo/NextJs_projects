// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  products      Product[]
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @db.ObjectId
}

model Date {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  stock     Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String    @db.ObjectId
  date        Date[]
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  lastUpdate  DateTime  @default(now())
  createdAt   DateTime  @default(now())
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
